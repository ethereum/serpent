# So I looked up on Wikipedia what Jacobian form actually is, and noticed that it's
# actually a rather different and more clever construction than the naive version
# that I created. It may possible to achieve a further 20-50% savings by applying
# that version.

extern modint.type: [add:[uint256,uint256,uint256,uint256,uint256,uint256]:uint256[], decompose:[int256[]]:int256[], double:[uint256,uint256,uint256]:uint256[], exp:[uint256,uint256,uint256]:uint256, mul:[uint256,uint256,uint256,uint256]:uint256[], recover_y:[uint256,int256]:int256]
extern modexp.se: [exp:[uint256,uint256,uint256]:uint256]

data JACOBIAN_ARITH
data EXP

N = -432420386565659656852420866394968145599
P = -4294968273

def init():
    self.JACOBIAN_ARITH = create('jacobian_arith.se')

event PubkeyTripleLogEvent(x:uint256, y:uint256, z:uint256)

def ecrecover(h:uint256, v, r:uint256, s:int256):
    h = mod(h, N)
    r = mod(r, P)
    s = mod(s, N)
    Gx = 55066263022277343669578718895168534326250603453777594175500187360389116729240
    Gy = 32670510020758816978083085130507043184471273380659243275938904335757337482424
    x = r
    y = self.JACOBIAN_ARITH.recover_y(x, mod(v, 2) xor 1)
    GZ = self.JACOBIAN_ARITH.mul(Gx, Gy, 1, N - h, outitems=3)
    log(type=PubkeyTripleLogEvent, GZ[0], GZ[1], GZ[2])
    XY = self.JACOBIAN_ARITH.mul(x, y, 1, s, outitems=3)
    log(type=PubkeyTripleLogEvent, XY[0], XY[1], XY[2])
    COMB = self.JACOBIAN_ARITH.add(GZ[0], GZ[1], GZ[2], XY[0], XY[1], XY[2], outsz=3)
    log(type=PubkeyTripleLogEvent, COMB[0], COMB[1], COMB[2])
    invr = self.JACOBIAN_ARITH.exp(r, N - 2, N)
    Q = self.JACOBIAN_ARITH.mul(COMB[0], COMB[1], COMB[2], invr, outsz=3)
    return(self.JACOBIAN_ARITH.decompose(Q, outitems=2):arr)
